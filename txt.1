.\"    Automatically generated by mango(1)
.TH "txt" 1 "2014-01-04" "version 2014-01-04" "User Commands"
.SH "NAME"
txt \- Command txt is a templating language for shell programming.
.SH "SYNOPSIS"
.B txt
.RB [ \-left
.IR Left ]
.RB [ \-right
.IR Right ]
.RB [ \-template
.IR Template ]
.RB [ \-e
.IR Expression ]
.RB [ \-F
.IR FieldSeparator ]
.RB [ \-R
.IR RecordSeparator ]
.RB [ \-json ]
.RB [ \-csv ]
.RB [ \-csv-header
.IR Header ]
.B template\-files*
.SH "DESCRIPTION"
Input 
.PP
The input to the template comes from stdin. 
It is parsed in one of three ways. 
.PP
The default is to split stdin into records and fields, using the 
.B \-R
and 
.B \-F
flags respectively, similar to awk(1), and dot is set to a list of lists of string. 
.PP
If the 
.B \-csv
flag, or the 
.B \-header
flag, is specified, stdin is treated as a CSV file, as recognized by the encoding/csv package. 
If the 
.B \-header
flag is not specified, the first record is used as the header. 
Dot is set to a list of maps, with the header for each column as the key. 
.PP
If the 
.B \-json
flag is specified, stdin is treated as JSON. 
Dot is set as the decoded JSON. 
.PP
Templates 
.PP
The templating language is documented at http://golang.org/pkg/text/template with the single difference that if the first line at the top of the file begins with #! 
that line is skipped. 
.PP
Any command line arguments after the flags are treated as filenames of templates. 
The templates are named after the respective filename. 
The first file listed is the main template, unless the 
.B \-template
flag specifies otherwise. 
If the 
.B \-e
flag is used to define an inline template, it is always the main template, and the 
.B \-template
flag is illegal. 
.PP
Functions 
.PP
Built in functions are documented at http://golang.org/pkg/text/template#hdr\-Functions 
.PP
The following additional functions are defined: 
.PP
.RS
readCSV headerspec filename
.sp 0
.RS
headerspec is a comma\-separated list of headers or "" to use the headers
.sp 0
in filename.
.sp 0
Dot is set to the contents of the CSV file as with \-csv.
.sp 0
If the file cannot be opened or its contents are malformed, execution
.sp 0
stops.
.sp 0
.sp
.RE
readJSON filename
.sp 0
.RS
Read the JSON encoded file into dot or halt execution if decoding fails
.sp 0
or the file cannot be opened.
.sp 0
Dot is set to the contents of the JSON file as with \-json.
.sp 0
.sp
.RE
read RS FS filename
.sp 0
.RS
Read filename with the default record and file splitting as specified
.sp 0
by the RS and FS regular expressions.
.sp 0
.sp
.RE
quote\-csv string
.sp 0
.RS
Apply the appropriate CSV quoting rules to string.
.sp 0
.sp
.RE
toJSON what
.sp 0
.RS
Encode what as JSON. Execution halts if
.sp 0
http://golang.org/pkg/encoding/json/#Marshal errors.
.sp 0
.sp
.RE
readFile filename
.sp 0
.RS
Read filename completely as a single string.
.sp 0
Execution halts if the file cannot be read.
.sp 0
.sp
.RE
equalFold string\-one string\-two
.sp 0
.RS
Reports whether the UTF\-8 encoded string\-one and string\-two are equal
.sp 0
under Unicode case\-folding.
.sp 0
.sp
.RE
fields string
.sp 0
.RS
Split string around whitespace.
.sp 0
.sp
.RE
join separator strings
.sp 0
.RS
Join the list in strings by the string separator.
.sp 0
.sp
.RE
lower string
.sp 0
.RS
Lowercase string.
.sp 0
.sp
.RE
upper string
.sp 0
.RS
Uppercase string.
.sp 0
.sp
.RE
title string
.sp 0
.RS
Titlecase string.
.sp 0
.sp
.RE
trim cutset string
.sp 0
.RS
Return string with all leading and trailing runes in cutset removed.
.sp 0
.sp
.RE
trimLeft cutset string
.sp 0
.RS
Return string with all leading runes in cutset removed.
.sp 0
.sp
.RE
trimRight cutset string
.sp 0
.RS
Return string with all trailing runes in cutset removed.
.sp 0
.sp
.RE
trimPrefix prefix string
.sp 0
.RS
Return string with prefix removed.
.sp 0
.sp
.RE
trimSuffix suffix string
.sp 0
.RS
Return string with suffix removed.
.sp 0
.sp
.RE
trimSpace string
.sp 0
.RS
Return string with all leading and trailing whitespace removed.
.sp 0
.sp
.RE
match pattern string
.sp 0
.RS
Return whether string matches the regex in pattern.
.sp 0
Execution halts if pattern is not a valid regular expression.
.sp 0
.sp
.RE
find pattern string
.sp 0
.RS
Returns all substrings of string that match pattern.
.sp 0
Execution halts if pattern is not a valid regular expression.
.sp 0
.sp
.RE
replace pattern spec string
.sp 0
.RS
Replace all substrings in string matching pattern by spec.
.sp 0
Execution halts if pattern is not a valid regular expression.
.sp 0
.sp
.RE
split pattern string
.sp 0
.RS
Split string into a list of substrings separated by pattern.
.sp 0
Execution halts if pattern is not a valid regular expression.
.sp 0
.sp
.RE
env key
.sp 0
.RS
Returns the environment variable key or "".
.sp 0
.sp
.RE
exec name args*
.sp 0
.RS
Execute command name with args. Stdin is nil.
.sp 0
Stderr shares the stderr of txt(1).
.sp 0
Stdout is returned as a string.
.sp 0
.sp
.RE
pipe name args* input
.sp 0
.RS
Execute command name with args with input as stdin.
.sp 0
Otherwise, like exec.
.RE
.RE
.SH "OPTIONS"
.TP
.BR "\-left " Left " = {{"
set left template delimiter 
.TP
.BR "\-right " Right " = }}"
set right template delimiter 
.TP
.BR "\-template " Template
which template to invoke, otherwise first listed 
.TP
.BR "\-e " Expression
expression to use as main template 
.TP
.BR "\-F " FieldSeparator " = [ 	]+"
field separator, RE2 regexp 
.TP
.BR "\-R " RecordSeparator " = 
+"
record separator, RE2 regexp 
.TP
.BR "\-json "
treat input as JSON 
.TP
.BR "\-csv "
treat input as CSV 
.TP
.BR "\-csv-header " Header
specify a header for the CSV, instead of the first row. 
.B \-csv
is assumed if 
.B \-csv-header
is used. 
